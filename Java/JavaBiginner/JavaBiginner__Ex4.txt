4.コンストラクタ,setter,getterについて
今回からpostgres使うためあらかじめ用意。


コンストラクタ
クラス名と同じ名前で、戻り値を必要としないもの。
オーバロード可能。（しかしコンストラクタのオーバロードはあんましない）


setter,getter
データを円滑に扱うために利用するもの。
プログラムの可読性、再利用性を高めることを目的とする。
ちなみに、JavaBeansはプロパティとこのsetter,getterしか持たない。


例題1 とりあえず書いてみよう

Sampleクラス
import java.util.Scanner;

public class Sample {
	public static void main(String[] args){
		new Sample();
	}

	public Sample(){
		String msg = toString();
		System.out.println(msg);
	}

	public String toString(){
		JavaBeans beans = new JavaBeans();
		beans.setItem_name("Java入門");
		beans.setItem_price(2000);

		return beans.getItem_name() + " は " + beans.getItem_price() + " 円です。";
	}
}

JavaBeansクラス  （コメントアウトは書かなくてok!）
public class JavaBeans {
	private String item_name;
	private int item_price;
	/**
	 * item_nameを取得します。
	 * @return item_name
	 */
	public String getItem_name() {
	    return item_name;
	}
	/**
	 * item_nameを設定します。
	 * @param item_name item_name
	 */
	public void setItem_name(String item_name) {
	    this.item_name = item_name;
	}
	/**
	 * item_priceを取得します。
	 * @return item_price
	 */
	public int getItem_price() {
	    return item_price;
	}
	/**
	 * item_priceを設定します。
	 * @param item_price item_price
	 */
	public void setItem_price(int item_price) {
	    this.item_price = item_price;
	}
}

メインメソッドでコンストラクタの呼び出し。
コンストラクタでtoString()メソッドの呼び出し。
toString()メソッドでJavaBeansクラスを呼び出し、セッターに値の代入。
戻り値として、JavaBeansのゲッターを呼び出し、文字列と連結。
その戻り値をコンストラクタのmsgオブジェクトに代入し出力。

また、new演算子ではコンストラクタを呼び出すと言ったが、クラスにコンストラクタがない場合は自動的に、空のコンストラクタが作成されてそれが呼び出される。



演習1 ちょい難問？
前提条件・内容
・例題1のJavaBeansクラスを利用する。
・メインメソッドがあるクラスを修正。

修正内容
・Scannerで「商品名」「値段」を入力できるようにする。
・しかし、「商品名」「値段」が入力されていない場合などがあるので、その際のエラー表示を出力する。

以上を踏まえて(a),(b)を解く。

(a) 入力エラーが発生する条件は3つ（例外的に4つ）あるが、箇条書きでエラー条件を2つ書け。
・(   )
・(   )
・(   )

例外エラー
・値段が数字ではなく文字列であった場合。


(b)　下記の/* */で書かれた箇所を記述せよ。


package testSeries;

import java.util.Scanner;

public class Sample {
	public static void main(String[] args){
		try{
			Scanner sc = new Scanner(System.in);

			System.out.println("商品名を入力");
			String name = sc.nextLine();

			System.out.println("値段を入力");
			String price = sc.nextLine();


			//下記条件分岐  コンストラクタの呼び出し
			/*
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 */
		}
		catch(Exception e){
			System.out.println("エラー");
		}
	}

	public Sample(){
		String msg = toString();
		System.out.println(msg);
	}
	
	//下記コンストラクタのオーバロード  ポリモフィズムを生かそう！
	/*
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 */



	public String toString(){
		return "商品名も値段も入力されていません。";
	}
	public String toString(String name){
		return "商品名は " + name + " です。値段は入力されていません。";
	}
	public String toString(int price){
		return "値段は " + price + " 円です。商品名は入力されていません。";
	}
	public String toString(JavaBeans beans){
		return beans.getItem_name() + " は " + beans.getItem_price() + " 円です。";
	}
}



(b)のヒント
・空白文字はnullではない。考えてみよう。(大ヒント：空白"文字")
・toStringメソッドが4つあって、オーバロードしてる...。
=> ということはコンストラクタは何個?







セッターゲッターの主な使い方を学ぶ前に、postgreSQLの準備を整えよう

コマンドプロンプト、postgresデータベースにて
create table item(
item_id 	integer 	primary key,
item_name 	text 		not null,
item_price 	integer 	not null,
maker_id 	integer 	not null,
stock 		integer 	default(0),
time 		timestamp 	not null
);
と打ち、テーブルを作ろう。

また、jdbcのjarをプロジェクトの外部jarとして登録。

例題2 とりあえず書いてみよう
Sample2クラス
public class Sample2 {
	public static void main(String[] args) throws Exception{
		Dao dao = new Dao();
		JavaBeans2 bean = new JavaBeans2();

		bean.setItem_id(1);
		bean.setItem_name("Javaの教科書");
		bean.setItem_price(2400);
		bean.setMaker_id(10);
		bean.setStock(100);

		dao.connect();
		dao.insert(bean);
		dao.close();

		System.out.println("商品を登録しました。");

	}
}

JavaBeans2クラス コメントアウトは書かなくてok!
public class JavaBeans2 {
	private int item_id;
	private String item_name;
	private int item_price;
	private int maker_id;
	private int stock;
	/**
	 * item_idを取得します。
	 * @return item_id
	 */
	public int getItem_id() {
	    return item_id;
	}
	/**
	 * item_idを設定します。
	 * @param item_id item_id
	 */
	public void setItem_id(int item_id) {
	    this.item_id = item_id;
	}
	/**
	 * item_nameを取得します。
	 * @return item_name
	 */
	public String getItem_name() {
	    return item_name;
	}
	/**
	 * item_nameを設定します。
	 * @param item_name item_name
	 */
	public void setItem_name(String item_name) {
	    this.item_name = item_name;
	}
	/**
	 * item_priceを取得します。
	 * @return item_price
	 */
	public int getItem_price() {
	    return item_price;
	}
	/**
	 * item_priceを設定します。
	 * @param item_price item_price
	 */
	public void setItem_price(int item_price) {
	    this.item_price = item_price;
	}
	/**
	 * maker_idを取得します。
	 * @return maker_id
	 */
	public int getMaker_id() {
	    return maker_id;
	}
	/**
	 * maker_idを設定します。
	 * @param maker_id maker_id
	 */
	public void setMaker_id(int maker_id) {
	    this.maker_id = maker_id;
	}
	/**
	 * stockを取得します。
	 * @return stock
	 */
	public int getStock() {
	    return stock;
	}
	/**
	 * stockを設定します。
	 * @param stock stock
	 */
	public void setStock(int stock) {
	    this.stock = stock;
	}

}




Daoクラス
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

public class Dao {
	Connection co = null;

	public void connect() throws Exception{
		Class.forName("org.postgresql.Driver");
		String url = "jdbc:postgresql:postgres";
		String user = "postgres";
		String pass = "YOUR PASSWORD";
		co = DriverManager.getConnection(url,user,pass);
	}

	public void close() throws Exception{
		co.close();
	}

	public void insert(JavaBeans2 bean) throws Exception{
		String sql ="insert into item values(?,?,?,?,?,now())";
		PreparedStatement ps = co.prepareStatement(sql);

		ps.setInt(1,bean.getItem_id());
		ps.setString(2,bean.getItem_name());
		ps.setInt(3,bean.getItem_price());
		ps.setInt(4,bean.getMaker_id());
		ps.setInt(5,bean.getStock());

		ps.executeUpdate();
	}

}


その後、コマンドプロンプトにて
select * from item;
そうすると、DBに入力したデータが挿入されているのが確認できる。


以上より、セッターゲッターを所持したJavaBeansさえ作れば無駄に引数の多いメソッドを作成しなくてもよくなる。
もし、JavaBeansがなければinsert()メソッドは5つも引数が必要になったはずだ。


演習2
(a),(b)を解け。

(a)
DBに、makerテーブルを作成する。テーブル内のカラムは、maker_id,maker_nameとし、制約や型は自由に決めてよい。

(b)
makerテーブルにデータを挿入するためのプログラムを作成する。
クラスは、MakerInsertクラス、Makerクラス、MakerDaoクラスとする。

クラス説明
・MakerInsertクラス
　メインメソッドを所持する。
　MakerDaoクラスの呼び出し。
　Makerクラスの所持するセッターに値を代入してMakerDaoクラスに値を渡す。

・Makerクラス
　makerテーブルに必要な情報を円滑に運ぶJavaBeans。

・MakerDaoクラス
　makerテーブルにデータを挿入するクラス。


