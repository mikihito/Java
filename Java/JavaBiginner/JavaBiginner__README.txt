
はじめに
わからなければ随時グーグルへ。それでもわからなければ諸沢へ。
特に単語で分からないところは積極的にググろう。
例題コピペは無意味。必ず手打ちで書くこと。



Javaがどこで使われているか
・Androidアプリ
・Web開発
・システム開発
など

ちなみに、システム開発でもWebを利用して開発されることが多い。

なぜJavaを学ぶか。その背景
現在ではWeb開発の現場でPHPが多く用いられている。理由は、単純に動作し、「簡単」と言われているPHPに対し、オブジェクト指向を取り入れたJavaをしっかりと扱える開発者が乏しいため。エンジニアの確保と言ってもいいだろう。
しかしながら、PHPが進化するにつれて新規参入のフレームワークなどでは、オブジェクト指向を用いなければしっかりと扱えない現状になりつつある。そのため、オブジェクト指向の学習をおろそかにしている企業やエンジニアは、徐々に遅れをとるであろうことが予測できる。
以上のことより、Javaを通して「Java」そのものだけでなくオブジェクト指向の概念を学習するべきであることがわかる。




プログラミングにおける学習フェーズ
一般的に、予習=>授業=>復習
という形が学習において望ましいとされている。
では、プログラミングにおける学習にもこれは適用できるのだろうか？

予習の粒度を細かくし、予習とはなにに当たるのか？
参考書を読む？教科書を読む？etc...
正直これらは効率が悪い。
答えは、分からなくてもいいからとりあえずコードを書くこと。
1回書いてわからなければ2回書く。
2回書いてわからなければ3回書く。
これが予習フェーズに当たる。

それから、プログラミングに精通している人の説明を聞く。
これが授業フェーズに当たるもの。

説明を聞いたら次は自分で書く。
自分自身のアイディアを元にプログラムを組めればより良い。
これが復習フェーズに当たる。



この資料を用いた学習法
基礎知識を読む
=>例題を手打ち
=>解説読む
=>演習
=>Javaができるようになる。


この講義のゴール、目標
Javaに対する知識を、確かな技術力に変える。
優秀な人材が乏しい日本で、少しでも多く立派なエンジニアを輩出する。
そのため、なんとなく理解した、とりあえずプログラムが動いた。のような考え方はしないように。




目次
1.データ型,クラス型,変数について
2.制御,キャスト,メソッド,ポリモフィズム,配列について
3.コレクションについて
4.コンストラクタ,setter,getterについて
5.継承
6.インタフェース
7.データベース　データ操作編 
8.データベース　データ照会編
9.JDBC
10.まとめ


